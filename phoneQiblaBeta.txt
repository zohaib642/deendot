import 'package:flutter/material.dart';
import 'dart:math' as math;
import 'package:flutter_compass/flutter_compass.dart';
import 'package:geolocator/geolocator.dart';
import 'feature_dot.dart';
import '../screens/prayer_times_screen.dart';
import '../screens/prayer_tracker_screen.dart';
import '../screens/request_dua_screen.dart';
import '../screens/meet_screen.dart';

class CentralDot extends StatefulWidget {
  // Making the constructor const-friendly by removing any non-const fields
  const CentralDot({Key? key}) : super(key: key);

  @override
  State<CentralDot> createState() => _CentralDotState();
}

class _CentralDotState extends State<CentralDot> with SingleTickerProviderStateMixin {
  bool _isExpanded = false;
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  double _direction = 0;
  double _qiblaDirection = 0;
  bool _hasQiblaDirection = false;
  
  // Using final instead of const for the features list in the State class
  final List<FeatureItem> features = const [
    FeatureItem("Prayer Times", Icons.access_time, Color.fromARGB(255, 0, 121, 109), 'prayer_times'),
    FeatureItem("Prayer Tracker", Icons.check_circle_outline, Color.fromARGB(255, 0, 121, 109), 'prayer_tracker'),
    FeatureItem("Request Dua", Icons.favorite, Color.fromARGB(255, 0, 121, 109), 'request_dua'),
    FeatureItem("Meet", Icons.people, Color.fromARGB(255, 0, 121, 109), 'meet'),
  ];

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(begin: 1.0, end: 0.8).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );
    
    // Initialize compass and Qibla direction
    _initCompass();
    _calculateQiblaDirection();
  }

  void _initCompass() {
    FlutterCompass.events?.listen((CompassEvent event) {
      setState(() {
        _direction = event.heading ?? 0;
      });
    });
  }

  Future<void> _calculateQiblaDirection() async {
    try {
      // Request location permission
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          return;
        }
      }
      
      // Get current position
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high
      );
      
      // Coordinates of Kaaba in Mecca
      const double kaabaLat = 21.4225;
      const double kaabaLng = 39.8262;
      
      // Calculate Qibla direction using the spherical law of cosines
      double latRad = position.latitude * (math.pi / 180);
      double lngRad = position.longitude * (math.pi / 180);
      double kaabaLatRad = kaabaLat * (math.pi / 180);
      double kaabaLngRad = kaabaLng * (math.pi / 180);
      
      // Calculate Qibla angle
      double y = math.sin(kaabaLngRad - lngRad);
      double x = math.cos(latRad) * math.tan(kaabaLatRad) - 
                 math.sin(latRad) * math.cos(kaabaLngRad - lngRad);
      double qiblaAngle = math.atan2(y, x);
      
      // Convert from radians to degrees
      double qiblaDegrees = qiblaAngle * (180 / math.pi);
      // Normalize to 0-360
      if (qiblaDegrees < 0) qiblaDegrees += 360;
      
      setState(() {
        _qiblaDirection = qiblaDegrees;
        _hasQiblaDirection = true;
      });
    } catch (e) {
      // Handle any errors
      print('Error calculating Qibla direction: $e');
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _toggleExpansion() {
    setState(() {
      _isExpanded = !_isExpanded;
      if (_isExpanded) {
        _controller.forward();
      } else {
        _controller.reverse();
      }
    });
  }

  void _navigateToFeature(BuildContext context, FeatureItem feature) {
    _toggleExpansion();
    
    // Navigate based on the feature
    Widget screen;
    switch (feature.route) {
      case 'prayer_times':
        screen = const PrayerTimesScreen();
        break;
      case 'prayer_tracker':
        screen = const PrayerTrackerScreen();
        break;
      case 'request_dua':
        screen = const RequestDuaScreen();
        break;
      case 'meet':
        screen = const MeetScreen();
        break;
      default:
        return;
    }
    
    // Delayed navigation for smooth animation
    Future.delayed(const Duration(milliseconds: 500), () {
      Navigator.push(
        context,
        PageRouteBuilder(
          pageBuilder: (_, animation, __) => screen,
          transitionDuration: const Duration(milliseconds: 500),
          transitionsBuilder: (_, animation, __, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        ),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      alignment: Alignment.center,
      children: [
        // Main dot
        GestureDetector(
          onTap: _toggleExpansion,
          child: AnimatedBuilder(
            animation: _scaleAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: _scaleAnimation.value,
                child: Transform.rotate(
                  // Rotate based on compass direction to point to Qibla
                  angle: _hasQiblaDirection 
                      ? (_direction - _qiblaDirection) * (math.pi / 180)
                      : 0,
                  child: Container(
                    width: 125,
                    height: 125,
                    decoration: BoxDecoration(
                      color: Theme.of(context).primaryColor,
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        // Compass design elements
                        Container(
                          width: 115,
                          height: 115,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: Colors.white.withOpacity(0.6),
                              width: 2,
                            ),
                          ),
                        ),
                        // Qibla Pointer
                        Positioned(
                          top: 5,
                          child: Container(
                            width: 12,
                            height: 40,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(6),
                            ),
                          ),
                        ),
                        // Center icon
                        Icon(
                          _isExpanded ? Icons.close : Icons.compass_calibration,
                          color: Colors.white,
                          size: 40,
                        ),
                        // Cardinal directions
                        Positioned(
                          top: 15,
                          child: Text(
                            'Qibla',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.w200,
                            ),
                          ),
                        ),
                        // Small dots around the edge for compass markings
                        ..._buildCompassMarkings(),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
        ),
        
        // Feature dots
        ..._buildFeatureDots(context),
      ],
    );
  }

  List<Widget> _buildCompassMarkings() {
    List<Widget> markings = [];
    int marksCount = 8; // 8 directional markings
    
    for (int i = 0; i < marksCount; i++) {
      double angle = (i * 2 * math.pi / marksCount);
      double radius = 50.0; // Distance from center
      
      bool isCardinal = i % 2 == 0; // Every other mark is a cardinal direction
      
      markings.add(
        Positioned(
          left: 57.5 + radius * math.cos(angle),
          top: 57.5 + radius * math.sin(angle),
          child: Container(
            width: isCardinal ? 6 : 4,
            height: isCardinal ? 6 : 4,
            decoration: BoxDecoration(
              color: isCardinal ? Colors.white : Colors.white.withOpacity(0.7),
              shape: BoxShape.circle,
            ),
          ),
        ),
      );
    }
    
    return markings;
  }

  List<Widget> _buildFeatureDots(BuildContext context) {
    List<Widget> dots = [];
    
    final double radius = 150.0;
    
    for (int i = 0; i < features.length; i++) {
      if (!_isExpanded) continue;
      
      final double angle = (i * 2 * math.pi / features.length);
      final double x = radius * math.cos(angle);
      final double y = radius * math.sin(angle);
      
      dots.add(
        TweenAnimationBuilder(
          tween: Tween<double>(begin: 0.0, end: 1.0),
          duration: const Duration(milliseconds: 800),
          curve: Curves.easeOutBack,
          onEnd: () {
            setState(() {});
          },
          builder: (context, double value, child) {
            return Transform.translate(
              offset: Offset(x * value, y * value),
              child: Opacity(
                opacity: value.clamp(0.0, 1.0),
                child: Transform.scale(
                  scale: value,
                  child: SizedBox(
                    width: 70,
                    height: 70,
                    child: FeatureDot(
                      feature: features[i],
                      onTap: () => _navigateToFeature(context, features[i]),
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      );
    }
    
    return dots;
  }
}